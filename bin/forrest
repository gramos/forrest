#!/usr/bin/env ruby
require 'ftools'
require 'rubygems'
require 'test/unit/ui/console/testrunner'

require File.join(File.dirname(__FILE__), '../lib/object')
require File.join(File.dirname(__FILE__), '../lib/forrest/unix_console_styler')

module Stories

  class ForrestRunner < Test::Unit::UI::Console::TestRunner
    def test_finished(name)
      set_story
    end

    def add_fault(fault)
      @faults << fault
    end

    def set_story
      s      ||= Story.new @suite.name
      @story ||= Stories.all[s.name.constantize]
    end

    def print_scenario(scenario)
      scenario.steps.each do |step|
        puts "      #{step}"
      end

      scenario.assertions.each do |assertion|
        puts "      #{assertion}"
      end

      puts
    end

    def print_story
      puts "- #{colorize(@story.name, :bold)} \n\n"

      @story.scenarios.each do |scenario|
        puts "    #{scenario.name}"

        unless scenario.steps.empty? && scenario.assertions.empty?
          print_scenario scenario
        end
      end
    end

    def finished(elapsed_time)
      puts
      print_story
      super
      stories_count   = 1
      scenarios_count = @story.scenarios.size

      puts colorize("#{stories_count} story, ", :bold) +
           colorize(" #{scenarios_count} scenarios", :bold)

    end
  end

end

def print_test_cases(test_cases)
  test_cases.each{|tc|
    tests = tc.suite.tests
    puts "\n+ #{colorize(tc, :bold)}"
    tests.each{|t|
      puts "|__ #{colorize(tc, :cyan)}##{colorize(t.method_name, :yellow)}"
    }
  }
end

def require_rails_env?
  env_path = File.expand_path(File.dirname(@test_file.to_s) +
                         "/../../config/environment")

  if File.file? env_path
    puts "Loading #{env_path}"
    require env_path
    return true
  elsif File.file? "./config/environment"
    require "./config/environment"
    return true
  end
  return false
end

def require_active_support_or_rails_env
  unless require_rails_env?
    require 'active_support/core_ext/string/inflections'
    require 'active_support/core_ext/string'
  end
end

def show
  @test_file  = ARGV[0]
  require @test_file
  require_active_support_or_rails_env
  @test_cases = test_class.subclasses
  print_test_cases(@test_cases)
  begin
    Test::Unit::UI::Console::TestRunner.run(nil)
  rescue NoMethodError
  end
end

def run_story
  require_test_file
  Stories::ForrestRunner.run(@test_class.constantize)
end

def run_scenario
  puts test_file
  require_test_file
  test = @test_class.constantize.suite.tests.find{|t|
    t.method_name == @test_name
  }

  Test::Unit::UI::Console::TestRunner.run(test)
end

def require_test_file
  begin
    require "test/#{test_file}"
  rescue LoadError
    require "test/stories/#{test_file}"
  end
end

def test_class
  @test_class = File.basename(@test_file, ".rb").camelize.constantize
end

def test_file
  @test_file  = "#{@test_class.split("::")[0].underscore}"
end

def colorize(text, color)
  "#{UnixConsoleStyler::STYLE[color]}#{text}\e[0m"
end

if File.file? ARGV[0]
  puts "==> Printing all stories/scenarios...\n\n"
  show
else

  if ARGV[0].include? "#"
    puts "==> Runing scenario...\n\n"
    @test_class = ARGV[0].split("#")[0]
    @test_name  = ARGV[0].split("#")[1]

    require_active_support_or_rails_env
    run_scenario
  else
    puts "==> Runing story...\n\n"
    @test_class = ARGV[0]

    require_active_support_or_rails_env
    run_story
  end
end


